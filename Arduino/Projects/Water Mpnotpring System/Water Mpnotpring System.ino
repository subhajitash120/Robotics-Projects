#define BLYNK_PRINT Serial

#define RELAY_PIN 16
#define soilMoisturePin 14
#define TDS_SENSOR_PIN A0
#define ONE_WIRE_BUS 2

#define BLYNK_TEMPLATE_ID "TMPL3PlhaeVJu"
#define BLYNK_TEMPLATE_NAME "Template 1"
#define BLYNK_AUTH_TOKEN "t5KI_6cEsDaz78Nz6-Ptd2jsSqW2d6Yy"

char ssid[] = "Cookie";
char pass[] = "123456780";

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

float temperatureCompensatedTDS;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

const unsigned char epd_bitmap_images__1_ [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x80, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xc0, 0x08, 0x20, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x38, 0x30, 0x0f, 0xe0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x80, 0x0c, 0x00, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x60, 0x1e, 0x20, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x5e, 0x74, 0x2d, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xb5, 0xd8, 0x5d, 0xd0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1b, 0x41, 0x86, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x60, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x04, 0x1f, 0xf8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x57, 0x08, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x50, 0xf0, 0x00, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x00, 0x00, 0x11, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xc0, 0x00, 0x00, 0x16, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0xc0, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x0f, 0xf4, 0x13, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x2f, 0xf8, 0x17, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc8, 0x1f, 0xfd, 0x11, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0b, 0xdf, 0xff, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x07, 0xe0, 0x33, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x0a, 0x81, 0x87, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x8a, 0xb8, 0x10, 0x88, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x42, 0x83, 0x40, 0x89, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x90, 0x00, 0x80, 0x45, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x10, 0x01, 0x80, 0x44, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x31, 0x00, 0x00, 0x42, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x21, 0x45, 0x25, 0x42, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x21, 0x49, 0xb5, 0x42, 0x44, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x21, 0x44, 0x25, 0x04, 0x44, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x01, 0x0c, 0x74, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x88, 0xa0, 0x07, 0x08, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0xc6, 0xf3, 0x91, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x02, 0xb0, 0x20, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xe1, 0x01, 0xc0, 0x46, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x80, 0x00, 0x8c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xb8, 0x60, 0x07, 0x08, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xfa, 0x1c, 0x18, 0x48, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a, 0x06, 0x30, 0x77, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0d, 0x80, 0xc0, 0x5b, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0xa0, 0x80, 0x7c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xa0, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x04, 0x18, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x02, 0x20, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0xc0, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0b, 0xdc, 0xe3, 0xff, 0xff, 0xe0, 0x73, 0x10, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x08, 0x7e, 0xd2, 0x04, 0x00, 0x23, 0xdf, 0x10, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x09, 0xaf, 0xf2, 0x04, 0x01, 0x25, 0x60, 0x90, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0a, 0xae, 0x96, 0x06, 0x47, 0x26, 0x3c, 0x90, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x89, 0x50, 0x46, 0x22, 0x0f, 0xa7, 0xdf, 0x91, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x1e, 0x62, 0x0f, 0xa3, 0x88, 0x11, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1e, 0x6a, 0xaf, 0x20, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x1e, 0x3e, 0xe8, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x24, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38, 0x00, 0x00, 0x0c, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00
};

const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
    epd_bitmap_images__1_
};

void setup() {
  Serial.begin(9600);
  pinMode(RELAY_PIN, OUTPUT);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_images__1_, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  display.display();
  delay(7500);
}

void loop() {
  Blynk.run();
  int soilMoistureValue = digitalRead(soilMoisturePin);
  int relayStatus = digitalRead(RELAY_PIN);
  sensors.requestTemperatures();
  float tempC = sensors.getTempCByIndex(0);

  if (tempC != DEVICE_DISCONNECTED_C) {
    int tdsSensorValue = analogRead(TDS_SENSOR_PIN);
    temperatureCompensatedTDS = tdsSensorValue + getTDSCorrection(tempC);
    Blynk.virtualWrite(V2, tempC);
    Blynk.virtualWrite(V3, temperatureCompensatedTDS);
    Serial.print("Water Temperature: ");
    Serial.print(tempC);
    Serial.println(" C");
    Serial.print("TDS Value: ");
    Serial.println(temperatureCompensatedTDS);
  } else {
    Serial.println("Error: Could not read temperature data");
  }

  if (soilMoistureValue == HIGH) {
    Serial.println("Tank is Empty");
    soilMoistureValue = 0;
  } else {
    Serial.println("Tank is Full");
    soilMoistureValue = 1;
  }

  Blynk.virtualWrite(V1, soilMoistureValue);

  if (relayStatus == HIGH) {
    Serial.println("Tap is ON");
  } else {
    Serial.println("Tap is OFF");
  }

  Serial.println();
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Temperature: ");
  display.print(tempC);
  display.print(" C");
  display.setCursor(0, 10);
  display.print("TDS Value: ");
  display.print(temperatureCompensatedTDS);
  display.setCursor(0, 30);
  display.print("Tank Status: ");
  display.print((soilMoistureValue == 1) ? "Full" : "Empty");
  display.setCursor(0, 40);
  display.print("Tap Status: ");
  display.print((relayStatus == HIGH) ? "ON" : "OFF");
  display.display();
  delay(1000);
}

BLYNK_WRITE(V0) {
  int pinValue = param.asInt();
  if (pinValue == 1) {
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }
}

float getTDSCorrection(float temperatureC) {
  float temperatureCorrection = 1 * temperatureC;
  return temperatureCorrection;
}
